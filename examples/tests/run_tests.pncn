
print: "pinecone v"+VERSION.x.String+"."+VERSION.y.String+"."+VERSION.z.String
print

print: "unit tests:"

runTest: "vars", "5.88\n"
runTest: "operators", "5\n4.75\n6\n1\n4\n2\n2.75\n2\nfls\nfls\ntru\ntru\ntru\nfls\ntru\nfls\n"
runTest: "order_of_ops", "11\n3\n6\n"
runTest: "constants", "21\n"
runTest: "conditionals", "3\n5\n"
runTest: "loops", "4\n3\n2\n1\n\n0\n1\n2\n3\n4\n5\n"
runTest: "strings", "hello\na\nbxyz\nwe\n6\n4\n"
runTest: "funcs", "1\n6\n10\n5\n3\n2\n1\n0\n15\n"

print

print: "integration tests:"

runTest:
	"../morse",
	"pinecone\\nquit",
	"enter some text or type quit: .--. .. -. . -.-. --- -. . \nenter some text or type quit: \n"

runTest:
	"../queue",
	"1\n2\n3\n4\n5\n6\nqueue {\n    7\n    8\n    9\n}\n\n"
	
runTest:
	"../brainfuck",
	"++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.",
	"enter your brainfuck code: Hello World!\n\n"
	
print
print: "tests done"

runTest :: {name: String, target: String}: (runTest: in.name, "", in.target)

runTest :: {name: String, symInput: String, target: String}:
(
	cmd: "./pinecone examples/tests/"+in.name+".pncn"
	
	in.symInput.len>0 ?
		cmd: "printf '"+in.symInput+"' | "+cmd
	
	out: runCmd: cmd
	
	out = in.target ? (
		print: ".\t"+in.name+" passed"
	)|(
		print: "X\t"+in.name+" failed"
		print: divideLine
		print: "output:"
		print: out
		print: "instead of:"
		print: in.target+divideLine
	)
)

divideLine :: "_____________________________________________\n"
