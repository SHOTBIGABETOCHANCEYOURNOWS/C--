print: "pinecone v"+VERSION.x.String+"."+VERSION.y.String+"."+VERSION.z.String
print

print: "unit tests:"

runTest: "vars"
runTest: "operators"
runTest: "order_of_ops"
runTest: "constants"
runTest: "conditionals"
runTest: "loops"
runTest: "strings"
runTest: "funcs"

print

print: "anti-regression tests:"

runTest: "no_newline_at_end"

print

print: "integration tests:"


#runTest:
#	"../morse",
#	"pinecone\\nquit",
#	"enter some text or type quit: .--. .. -. . -.-. --- -. . \nenter some text or type quit: \n"

#runTest:
#	"../queue",
#	"1\n2\n3\n4\n5\n6\nqueue {\n    7\n    8\n    9\n}\n\n"
	
#runTest:
#	"../brainfuck",
#	"++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.",
#	"enter your brainfuck code: Hello World!\n"
	
print
print: "tests done"

runTest :: {String}: (runTest: in, "")

runTest :: {name: String, symInput: String}:
(
	cmd: "./pinecone examples/tests/"+in.name+".pn"
	
	in.symInput.len>0 ?
		cmd: "printf '"+in.symInput+"' | "+cmd
	
	out: runCmd: cmd
	
	quit: fls
	i: 0
	target: String
	actual: String
	
	!quit @ (
		i + splitSub.len >= out.len ? (
			target: "no target provided"
			actual: "no output provided"
			quit: tru
		)|
		(out.sub: i, i+splitSub.len) = splitSub ? (
			target: out.sub: 0, i
			actual: out.sub: i+splitSub.len, out.len
			quit: tru
		)|(
			i: i+1
		)
	)
	
	target = actual ? (
		print: ".\t"+in.name+" passed"
	)|(
		print: "X\t"+in.name+" failed"
		print: divideLine
		print: "output:"
		print: actual
		print: "instead of:"
		print: target
		print: divideLine
	)
)

splitSub :: "_____\n"
divideLine :: "_____________________________________________\n"
